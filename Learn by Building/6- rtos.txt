*---------------------------------------------------------------------*
|                                RTOS                                 |
*---------------------------------------------------------------------*

-> What is FreeRTOS?
    - An open-source real-time operating system (RTOS) designed for embedded systems and microcontrollers.

-> Why FreeRTOS?
    - FreeRTOS is ported to many important processor architectures:
        + ARM Cortex-M, ARM Cortex-A
        + AVR, PIC
        + ESP32
        + RISC-V
        + ...

    - FreeRTOS provides a kernel and various kernel-related services designed specifically for real-time applications.
    - These services help manage timing, synchronization, and coordination of tasks in an embedded system:
        + Task management
        + Time management
        + Memory management
        + Task notifications
        + Software timers (one-shot and periodic timers)
        + Intertask communication (Queues, Semaphores, Mutexes)
        + Event groups (a way to synchronize tasks based on multiple events)

-> How to use FreeRTOS in your project?
    - Download and integrate manually from the FreeRTOS website
    or
    - Use CMSIS-FreeRTOS from ARM
    or
    - Using STM32CubeIDE/MX

*---------------------------------------------------------------------*
|                               TIMERS                                |
*---------------------------------------------------------------------*

- When using FreeRTOS with STM32Cube, it is recommended to configure two hardware timers to avoid conflicts:
    + SysTick Timer for FreeRTOS    : generates the time base for the FreeRTOS kernel, and allows it to handle tasks scheduling, delays and timeouts.
    + Timer Peripheral for Cube HAL : generates the time base for the Cube HAL, handles HAL-specific time functions, and other time-based operations.

*---------------------------------------------------------------------*
|                       STACK AND HEAP SETTINGS                       |
*---------------------------------------------------------------------*

- These are the memory-related settings to consider when configuring a FreeRTOS project:
    + Stack size setting of the FreeRTOS project
    + Heap size setting of the FreeRTOS project
    + Stack size setting of individual tasks

- RAM memory layout in STM32 microcontrollers is structured as follows:
    -> RAM_START = 0x20000000, RAM_END = 0x20009FFF, TOTAL_RAM = 40 KBytes = 40960 bytes
    >> RAM is consumed by multiple memory segments:
        + Stack
        + Heap
        + Data segment (global and static variables)

    -> STACK_START = 0x20009FFF + 1, STACK_END = 0x20009C00, _Min_Stack_Size configurable parameter
    >> The stack is used by the main program and the interrupt service rountines (ISRs).
    >> It's used before the FreeRTOS scheduler is started, and for any code that runs outside of FreeRTOS tasks.

    -> HEAP_START = 0x20009A00, HEAP_END = 0x20009BFF, _Min_Heap_Size configurable parameter
    >> The heap is used by the C standard library (newlib or newlib-nano) for dynamic memory allocation.

    -> 
    >> FreeRTOS Heap is used exclusively by FreeRTOS for its own dynamic memory allocation needs.
    >> It's configured using the configTOTAL_HEAP_SIZE macro in the FreeRTOSConfig.h file.
    >> FreeRTOS uses this heap to allocate memory for tasks, queues, semaphores and other kernel objects.
    >> heap_x.c of FreeRTOS will manage this heap memory.

    -> 
    >> Each FreeRTOS task has its dedicated stack memory and task control block (TCB).
    >> The stack memory holds local variables, task context, and function call context.
    >> The TCB holds tasks metadata.
    >> These can be allocated dynamically from the FreeRTOS heap or statically from a pre-allocated global section.

*---------------------------------------------------------------------*
|                          TASKS PRIORITIES                           |
*---------------------------------------------------------------------*

- In FreeRTOS, each task is assigned a priority from 0 to (configMAX_PRIORITIES - 1).
- The configMAX_PRIORITIES macro is defined in the FreeRTOSConfig.h file and specifies the total number of available priority levels.
